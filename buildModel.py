import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Conv2D, DepthwiseConv2D, SeparableConv2D 
from keras.layers import AvgPool2D, Dropout, Flatten, BatchNormalization



N = 5 # number of particles
STEPS = 10 # number of steps
LOSS = 'sparse_categorical_crossentropy' # Loss function
BATCH_SIZE = 64 # Size of batches to train on
NUMOFCLASS = 10 # Number of classes

class ModelBuilder:

    def build_model(self, loss):
        """
        Builds test Keras model for predicting Iris classifications

        :param loss (str): Type of loss - must be one of Keras accepted keras losses
        :return: Keras dense model of predefined structure
        """
        model = Sequential()
        # 1
        #model.add(BatchNormalization())
        model.add(Conv2D(
            32, 
            kernel_size=(3,3),
            padding='SAME', 
            strides=(2,2),
            activation=tf.nn.relu,
            input_shape=(224,224,3)
        ))
        model.add(BatchNormalization())
        # 2
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu       
        ))
        # 3
        model.add(Conv2D(
            64, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        model.add(BatchNormalization())
        # 4
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(2,2),
            activation=tf.nn.relu
        ))
        # 5
        model.add(Conv2D(
            128, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        model.add(BatchNormalization())
        # 6
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        # 7
        model.add(Conv2D(
            128, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        model.add(BatchNormalization())
        # 8
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(2,2),
            activation=tf.nn.relu
        ))
        # 9
        model.add(Conv2D(
            256, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        model.add(BatchNormalization())
        # 10
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        # 11
        model.add(Conv2D(
            256, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        model.add(BatchNormalization())
        # 12
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(2,2),
            activation=tf.nn.relu
        ))
        # 13
        model.add(Conv2D(
            512, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        model.add(BatchNormalization())
        # 14 
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        # 15
        model.add(Conv2D(
            512, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        model.add(BatchNormalization())
        # 142
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        # 152
        model.add(Conv2D(
            512, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        model.add(BatchNormalization())
        # 143
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        # 153
        model.add(Conv2D(
            512, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        model.add(BatchNormalization())
        # 144
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
            
        ))
        # 154
        model.add(Conv2D(
            512, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        model.add(BatchNormalization())
        # 145
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        # 155
        model.add(Conv2D(
            512, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        model.add(BatchNormalization())
        # 16
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(2,2),
            activation=tf.nn.relu
        ))
        # 17
        model.add(Conv2D(
            1024, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        model.add(BatchNormalization())
        # 18
        model.add(DepthwiseConv2D(
            kernel_size=(3,3),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        # 19
        model.add(Conv2D(
            1024, 
            kernel_size=(1,1),
            padding='SAME', 
            strides=(1,1),
            activation=tf.nn.relu
        ))
        # 20
        model.add(AvgPool2D(
            pool_size=(7,7), 
            strides=(1,1)
            ))
        # 21
        model.add(Dropout(
            rate=0.001
        ))
        model.add(Flatten())
        model.add(Dense(
            NUMOFCLASS,
            activation=tf.nn.relu
        ))
        model.add(Dense(
            NUMOFCLASS,
            activation='softmax'
        ))

        #model.add(keras.losses.sparse_categorical_crossentropy())

        model.compile(
            loss=loss,
            optimizer='RMSprop',
            metrics=['accuracy']
        )

        print("model is ok ")
        return model
